"""
Django settings for akevision project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/


For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import configparser
import os
import sys
import logging

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#config: On crée une variable permettant d'analyser un fichier.
#On cible le fichier à analyser avec config.read('%/NOMDUFICHIER' % (Base du projet))
#Ces deux lignes permettent à variabiliser les données de ce fichier
config = configparser.RawConfigParser(allow_no_value=True)
config.read('%s/configlocal.cfg' % (BASE_DIR))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get('general', 'SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean('general', 'DEBUG')

if DEBUG:
    ALLOWED_HOSTS = []
    CSP_CONNECT_SRC = ["'self'", "*"]
else:
    ALLOWED_HOSTS = [config.get('general', 'ALLOWED_HOST')]



# Application definition

INSTALLED_APPS = [
    'channels',
    'rest_framework.authtoken',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django_filters',
    'akevision_rest',
]

ASGI_APPLICATION = 'akevision.asgi.application'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ORIGIN_WHITELIST = [
    "http://localhost:8000",
    "http://localhost:4200",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:4200",
    
    
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:4200",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:4200",
]

ROOT_URLCONF = 'akevision.urls'

# SITE_URL sert à différencier les sites d'administration
# voir get_title var le fichier urls.py

# prod
# SITE_URL = "https://akevision.akema.fr/admin/"

# recette
# SITE_URL = "https://akevision-preprod.akema.fr/admin/"

# developpement
SITE_URL = config.get('general', 'SITE_URL')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'akevision.wsgi.application'
CORS_ALLOW_ALL_ORIGINS = True

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, '../db.sqlite3'),
        'DJANGO_SETTINGS_MODULE' : 'akevision.settings',
    }
    #  'default': {
    #     'ENGINE': config.get('databases', 'ENGINE'),
    #     'NAME': config.get('databases', 'NAME'),
    #     'DJANGO_SETTINGS_MODULE': config.get('databases', 'DJANGO_SETTINGS_MODULE'),
    #     'USER': config.get('databases', 'USER'),
    #     'PASSWORD': config.get('databases', 'PASSWORD'),
    #     'HOST': config.get('databases', 'HOST'),
    #     'PORT': config.get('databases', 'PORT')
    # }
}



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# static pour la branche deploy
# STATIC_ROOT = '/home/dev/akevision/akevisionfront/dist/akevisionfront/static/'

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]


TESTS_IN_PROGRESS = False
if 'test' in sys.argv[1:]:
    DATABASES['default'] = {'ENGINE': 'django.db.backends.sqlite3'}
    DJANGO_SETTINGS_MODULE = 'nomprojet.python manage.py createsuperusersettings'
    TESTS_IN_PROGRESS = True

# logging part
if DEBUG:
    LOG_LEVEL = 'DEBUG'
    LOG_LEVEL_DJANGO = 'INFO'
else:
    LOG_LEVEL = 'WARNING'
    LOG_LEVEL_DJANGO = 'ERROR'

LOGGING_PATH = os.path.join(BASE_DIR, 'log')
if not os.path.exists(LOGGING_PATH):
    os.makedirs(LOGGING_PATH)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(name)-14s: %(levelname)-8s %(asctime)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'logfile': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGGING_PATH, 'akevision.log'),
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['logfile'],
            'level': LOG_LEVEL_DJANGO,
            'formatter': 'simple',
        },
        'django.db.backends': {
            'handlers' : ['logfile',],
            'propagate': False,
            'level': LOG_LEVEL,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL_DJANGO,
        'formatter': 'simple',
    }

}
# DEFAULT_FROM_EMAIL = config.get('email', 'DEFAULT_FROM_EMAIL')
# EMAIL_SUBJECT_PREFIX = config.get('email', 'EMAIL_SUBJECT_PREFIX')
# BASE_ENV_URL = config.get('email', 'BASE_ENV_URL')
# EMAIL_INFORMATION_BASE_URL = config.get('email', 'EMAIL_INFORMATION_BASE_URL')
# EMAIL_VALIDATION_BASE_URL = config.get('email', 'EMAIL_VALIDATION_BASE_URL')
# if DEBUG:
#     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# else:
#     EMAIL_BACKEND = 'akevision_rest.mailing.email_backend.EmailBackend'
#     email = {
#         'host': 'ucs.akema.fr',
#         'port': '587',
#         'username': config.get('email', 'username'),
#         'password': config.get('email', 'password'),
#         'use_tls': True,
#         'use_ssl': False
#     }